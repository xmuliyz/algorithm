学习心得(github project(algorithm))：
,,,
一、
问题
定义一个20*5的二维数组，用来存储某班级20位学员的5门课的成绩；这5门课按存储顺序依次为：core C++，coreJava，Servlet，JSP和EJB。
（1）循环给二维数组的每一个元素赋0~100之间的随机整数。
（2）按照列表的方式输出这些学员的每门课程的成绩。
（3）要求编写程序求每个学员的总分，将其保留在另外一个一维数组中。
（4）要求编写程序求所有学员的某门课程的平均分。
,,,

1、链表推导式(List Comprehension)：[xxx for yyy in zzz]
	XXX表示链表，yyy限定XXX中参数，zzz表示yyy的循环范围
	列表推导式：variable = [out_exp_res for out_exp in input_list if out_exp == 2]
							out_exp_res：列表生成元素表达式，可以是有返回值的函数。
							for out_exp in input_list：迭代input_list将out_exp传入out_exp_res表达式中。
							if out_exp == 2：根据条件过滤哪些值可以。
	
	
	示例:(1)、noprimes = [j for i in range(2, 8) for j in range(i * 2, 100, i)]  #for i in range（2，8）是外循环，for j in range （i*2，100，i）是内循环。
	     最后将每一次循环结果输出到noprimes中。
			eg：noprimes = [j for i in range(2, 8) for j in range(i*2, 100, i)]
				primes = [x for x in range(2, 100) if x not in noprimes]
				print(primes)#输出2-100直接的质数
				
				第二种获取质数的方法：
				from math import sqrt
				n = 100
				sqrt_n = int(sqrt(n))
				no_primes = {j for i in range(2, sqrt_n+1) for j in range(i*2, n, i)}#大括号{}表示集合[]表示列表
				primes = {i for i in range(2, n) if i not in no_primes}
				print(primes)
		(2)、[[score_list[j][i] for j in range(course_num)] for i in range(student_num)]  #for i in range(course_num)是外循环，[score_list[j][i] for j in range(course_num)]是内循环
		
		(3)、[x*y for x in range(1,5) if x > 2 for y in range(1,4) if y < 3]#各语句之间是嵌套关系，左边第二个语句是最外层，依次往右进一层，左边第一条语句是最后一层
			执行顺序：
				for x in range(1,5)
					if x > 2
						for y in range(1,4)
							if y < 3
								x*y
								
2、if __name__ =="__mian__": #如果模块是被直接运行的，则代码块被运行，如果模块是被导入的，则代码块不被运行。

3、from __future__ import division #这样的做法的作用就是将新版本的特性引进当前版本中，也就是说我们可以在当前版本使用新版本的一些特性。
		eg:# python 2.x
		     5/2
		    >>> 2
 		    from __future__ import division(除法特性)
		    5/2
			>>> 2.5
	其他特性：print_function	#print 特性
	
 4、def function(p1,p2,p3):
		return(r1,r2,r3)

二、
"""
问题：

定义一个int型的一维数组，包含10个元素，分别赋值为1~10， 然后将数组中的元素都向前移一个位置，
git
即，a[0]=a[1],a[1]=a[2],…最后一个元素的值是原来第一个元素的值，然后输出这个数组。
"""
1、.pop函数：
	.pop()#弹出列表末尾的元素，但是可以接着使用。
	.pop(0)#弹出列表任何位置处的元素，且可以接着使用。
	区别：
		.del()#从列表中删除之后将无法使用，同样可以删除任何位置的元素。
		.remove()#根据值来删除元素，并可以接着使用删除的元素，但是remove只删除列表中第一个指定的值，如果该值在列表中出现多次，则需要用循环语句来判断是否删除所以这样的值。
2、.append函数：#在列表末尾添加元素
   .insert(x,'')#在列表的任何位置添加元素

三、
"""
问题：
定义一个int型的一维数组，包含40个元素，用来存储每个学员的成绩，循环产生40个0~100之间的随机整数，
(1)将它们存储到一维数组中，然后统计成绩低于平均分的学员的人数，并输出出来。
(2)将这40个成绩按照从高到低的顺序输出出来。
"""
1、sort()和sorted()
	sort()只适用于列表，且其直接修改原列表；
	sorted()适用于任何可迭代得列表，返回一个新的列表；
2、sorted()得语法格式。
	sorted(L,cmd=lamda,key=lamda x:x());其中L为可迭代对象，cmd比较函数，key关键函数。
	示例：
	class Student:
    		def __init__(self, name, grade, age):
        		self.name = name
        		self.grade = grade
        		self.age = age
   		 def __repr__(self):
        		return repr((self.name, self.grade, self.age))
     student_objects = [
    		 Student('john', 'A', 15),
   		 Student('jane', 'B', 12),
   		 Student('dave', 'B', 10),
]
	sorted(student_objects, key=lambda student: student.age)   # sort by age
	[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
还可以用operate函数模块：itemgetter()、attrgetter()、 methodcaller()
	from operator import itemgetter, attrgetter
	sorted(student_tuples, key=itemgetter(2)) #按年龄排
	sorted(student_objects, key=attrgetter('age')) #按年龄排
	sorted(student_tuples, key=itemgetter(2), reverse=True) #升降序，reverse=True为降序，reverse=False为升序
	
四、阿拉伯乘法
1、map（function，iterable）#function代表函数，iterable代表一个或多个序列
	eg：map(square, [1,2,3,4,5])   # 计算列表各个元素的平方
	    map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])#使用lamda匿名函数计算x+y
	